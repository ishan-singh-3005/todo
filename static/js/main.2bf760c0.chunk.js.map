{"version":3,"sources":["ListItems.js","TodoBanner.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","React","useState","anchorEl","setAnchorEl","handleClick","event","currentTarget","handleClose","listItems","items","map","className","key","type","id","value","text","onChange","e","setUpdate","target","IconButton","onClick","deleteItem","aria-controls","aria-haspopup","data-tut","Menu","keepMounted","open","Boolean","onClose","MenuItem","priority","TodoBannert","length","App","state","doneItems","currentItem","handleInput","bind","addItem","clearAll","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","item","onSubmit","placeholder","done","Component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bf760c0.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './ListItems.css';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { IconButton } from '@material-ui/core';\r\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\r\n\r\nexport default function ListItems(props){\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n      };\r\n    \r\n      const handleClose = () => {\r\n        setAnchorEl(null);\r\n      };\r\n    const items = props.items;\r\n    const listItems= items.map(items =>\r\n        {\r\n            return(\r\n            <div className=\"list\" key={items.key}>\r\n                <p>\r\n                    <input type=\"text\" \r\n                    id={items.key} \r\n                    value={items.text}\r\n                    onChange={\r\n                        (e) => {\r\n                            props.setUpdate(e.target.value, items.key)\r\n                        }\r\n                    }/>\r\n                    <span>                        \r\n                        <IconButton className=\"faicons\"\r\n                        onClick={ () => props.deleteItem(items.key)}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>  \r\n                        <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n                            <PriorityHighIcon data-tut=\"tag\"/>\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"simple-menu\"\r\n                            anchorEl={anchorEl}\r\n                            keepMounted\r\n                            open={Boolean(anchorEl)}\r\n                            onClose={handleClose}\r\n                        >\r\n                            <MenuItem >High</MenuItem>\r\n                            <MenuItem >Medium</MenuItem>\r\n                            <MenuItem >Low</MenuItem>\r\n                        </Menu>\r\n                        {props.priority === \"High\" ? <button>High</button> : null}                                   \r\n                    </span>\r\n                </p>\r\n            </div>\r\n            )\r\n        })\r\n\r\n    return(\r\n        <div>{listItems}</div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css'\r\n\r\nexport default function TodoBannert(props){\r\n\r\n        return(\r\n            <div className=\"banner\">\r\n                {props.items.length === 1 ? <h1>You have 1 task remaining</h1> \r\n                : <h1>You have {props.items.length} tasks remaining</h1>}                \r\n            </div>\r\n        ); \r\n}\r\n\r\n\r\n","import React from 'react';\nimport ListItems from './ListItems';\nimport './App.css';\nimport TodoBanner from './TodoBanner';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      doneItems:[],\n      currentItem:{\n        text:'',\n        key:'',\n        priority:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    this.clearAll = this.clearAll.bind(this);\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now(),\n        priority: \"\"\n      }\n    })\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text !== \"\"){\n      const newItems= [...this.state.items, newItem]\n      this.setState({\n        items: newItems,\n        currentItem:{\n          text: '',\n          key: ''\n        }\n      })\n    }\n  }\n\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item =>\n      item.key !== key);\n      this.setState({\n        items:filteredItems\n      })\n  }\n\n  setUpdate(text, key){\n    const items = this.state.items;\n    items.map(item => {\n      if(item.key === key){\n        item.text=text;\n      }\n      this.setState({\n        items: items\n      })\n    })\n  }\n\n  clearAll(){\n    this.setState({\n      items:[]\n    })\n  }\n\n  render(){\n    return (\n      <div className= \"App\">\n        <TodoBanner items={this.state.items}/>\n        <header>\n          <form id= \"to-do-form\" onSubmit={this.addItem}>\n            <input type= \"text\" placeholder=\"Add todo\"\n            value={this.state.currentItem.text}\n            onChange={this.handleInput}/>\n            <button type= \"submit\">Add</button>\n          </form>\n          <div>\n            <button className=\"btn-danger\"\n            onClick={this.clearAll}\n            >Clear All</button>\n          </div>          \n        </header>\n        <ListItems items={this.state.items}\n        done={this.state.items.done}\n        deleteItem={this.deleteItem}\n        setUpdate= {this.setUpdate}\n        priority={this.state.currentItem.priority}/>\n      </div>\n      );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}